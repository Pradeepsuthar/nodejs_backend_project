let express,registerController,loginController,userController,refreshController,isAuthenticated,isAdmin,productController;_a2c‍.x([["default",()=>_a2c‍.o]]);_a2c‍.w("express",[["default",["express"],function(v){express=v}]]);_a2c‍.w("../controller",[["registerController",["registerController"],function(v){registerController=v}],["loginController",["loginController"],function(v){loginController=v}],["userController",["userController"],function(v){userController=v}],["refreshController",["refreshController"],function(v){refreshController=v}]]);_a2c‍.w("../middlewares/auth",[["default",["isAuthenticated"],function(v){isAuthenticated=v}]]);_a2c‍.w("../middlewares/admin",[["default",["isAdmin"],function(v){isAdmin=v}]]);_a2c‍.w("../controller/productController",[["default",["productController"],function(v){productController=v}]]);





const router = express.Router();


router.post('/register', registerController.register);
router.post('/login', loginController.login);
router.get('/get-user-profile', isAuthenticated, userController.getUserDetails);
router.post('/refresh', refreshController.refresh);
router.post('/logout', isAuthenticated, loginController.logout);

router.post('/create-product', [isAuthenticated, isAdmin], productController.createProduct);
router.get('/get-product-by-id/:id', productController.getProductById);
router.get('/get-products', productController.getAllProducts);
router.delete('/products/:id', [auth, admin], productController.deleteProdut);


_a2c‍.d(router);
